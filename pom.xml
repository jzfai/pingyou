<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>pinyou</artifactId>
        <groupId>com.pinyou.parent</groupId>
        <version>1.0.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.pinyou.common</groupId>
    <artifactId>pinyou-registry</artifactId>
    <version>1.0.0-SNAPSHOT</version>

    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>

        <!-- Spring Cloud Config 客户端依赖-->
        <!--<dependency>-->
            <!--<groupId>org.springframework.cloud</groupId>-->
            <!--<artifactId>spring-cloud-starter-config</artifactId>-->
        <!--</dependency>-->

    </dependencies>


    <build>
        <finalName>app</finalName>
        <plugins>
            <!--&lt;!&ndash; 插件一定要在其他构建插件之上，否则打包文件会有问题。 &ndash;&gt;-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!-- docker的maven插件，官网：
                  https://github.com/spotify/docker-maven-plugin -->
            <!--<plugin>-->
                <!--<groupId>com.spotify</groupId>-->
                <!--<artifactId>docker-maven-plugin</artifactId>-->
                <!--<version>1.0.0</version>-->
                <!--&lt;!&ndash;生成镜像相关配置&ndash;&gt;-->
                <!--<configuration>-->
                    <!--&lt;!&ndash; 将forceTags设为true，这样就会覆盖构建相同标签的镜像  &ndash;&gt;-->
                    <!--<forceTags>true</forceTags>-->
                    <!--&lt;!&ndash; 远程 docker 宿主机地址, 端口号是/lib/systemd/system/docker.service所暴露的端口号, 生成镜像到docker中 &ndash;&gt;-->
                    <!--<dockerHost>http://11.0.0.210:2375</dockerHost>-->
                    <!--&lt;!&ndash;内容是之前修改的maven的settings.xml配置文件中，server节点的id&ndash;&gt;-->
                    <!--<serverId>docker-aliyun</serverId>-->
                    <!--&lt;!&ndash; 镜像名：阿里云镜像仓库地址-->
                                <!--${project.artifactId}引用当前工程名，-->
                                <!--${project.version}引用当前工程版本号-->
                                <!--registry.cn-hangzhou.aliyuncs.com/mengxuegu/demo:0.0.1-SNAPSHOT &ndash;&gt;-->
                    <!--<imageName>registry.cn-shenzhen.aliyuncs.com/jzfai/${project.artifactId}_10086:${project.version}</imageName>-->
                    <!--&lt;!&ndash;基础镜像 FORM java&ndash;&gt;-->
                    <!--&lt;!&ndash;<baseImage>jdk</baseImage>&ndash;&gt;-->
                    <!--<baseImage>java</baseImage>-->
                    <!--&lt;!&ndash;类似于Dockerfile的ENTRYPOINT指令 java -jar /app.jar&ndash;&gt;-->
                    <!--<entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>-->
                    <!--<resources>-->
                        <!--<resource>  &lt;!&ndash; 指定打包的资源文件 &ndash;&gt;-->
                            <!--<targetPath>/</targetPath> &lt;!&ndash; 指定要复制的目录路径，这里是当前目录 &ndash;&gt;-->
                            <!--<directory>${project.build.directory}</directory> &lt;!&ndash; 指定要复制的根目录，这里是target目录 &ndash;&gt;-->
                            <!--<include>${project.build.finalName}.jar</include> &lt;!&ndash; 这里指定最后生成的jar包 &ndash;&gt;-->
                        <!--</resource>-->
                    <!--</resources>-->
                <!--</configuration>-->
            <!--</plugin>-->
        </plugins>
    </build>
</project>